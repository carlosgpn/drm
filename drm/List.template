// NOTE: "Class View" does not let you access this template file
// within .NET developer studio. Use "Solution Explorer" instead!


// default constructor (just in case, it is always safer to have one)
// this one creates an empty bag of DEFAULT capacity
template <class Item>
List<Item> :: List() {
	m_container = std::vector<Item>();
   
} 

// constructor builds a bag with the ability to hold
// max_capacity of items; the bag is initially empty 
template <class Item>
List<Item> :: List(unsigned int capacity) {
	m_max_capacity = capacity;
    m_container = std::vector<Item>();
   
} 

// destructor destroys the bag by recycling the memory it used
template <class Item>
List<Item> :: ~List( ) {
	
}

template <class Item>
void List<Item> :: clear(){
    m_container.clear();
}

template <class Item>
bool List<Item> :: isEmpty( ) const {
    return m_container.empty();
}

template <class Item>
bool List<Item> :: isFull( ) const {
    return false;
}                                                                                        // cont’d..

template <class Item>
unsigned int List<Item> :: getLength( ) const {
    return m_container.size();
}

template <class Item>
bool List<Item> :: insert(unsigned int pos, Item item) {
	if ((pos < 1) || (pos > getLength( )+1))     // || item == NULL)
        return false;
    
    if(pos > getLength( )){
        m_container.resize(getLength( ) + m_max_capacity);
    }
    
    m_container.insert(m_container.begin() + (pos - 1),item);
    
    return true;
}

template <class Item>
Item List<Item> :: remove (unsigned int pos) {
    if ( isEmpty( ) || (pos < 1) || (pos > getLength( )))
        return NULL;
   
    Item ret = retrieve(pos);
     m_container.erase(m_container.begin() + (pos - 1));
    
    return ret;
} 


template <class Item>
Item List<Item> :: retrieve(unsigned int pos) const {
    if ((pos < 1) || (pos > getLength( )))
        return NULL;
    return m_container.at(pos-1);
}

template <class Item>
Item List<Item> :: replace( unsigned int pos, Item item ) {
	if ( (pos < 1) || (pos > getLength( )+1) || item == NULL) return NULL;
	 
    m_container.insert(m_container.begin() + (pos - 1),item);
    
    return item;
}

template <class Item>
bool List<Item> :: append(Item item) {
    
    m_container.push_back(item);
    
	return this;
}


template <class Item>
inline Item List<Item> ::removeLast() {
    
    Item ret = m_container.back();
    
    m_container.pop_back();
    
    return ret;

}   // removes the last item in the list, if any, returns NULL otherwise

template <class Item>
inline Item List<Item> ::retrieveLast()  {
    
    return m_container.back();

} // retreive the last item in the list, if any, returns NULL otherwise



