// NOTE: "Class View" does not let you access this template file
// within .NET developer studio. Use "Solution Explorer" instead!



template <class Item>
Stack1<Item> :: Stack1( ) {
     m_container = new List<Item>( );
} 
 
template <class Item>
Stack1<Item> :: Stack1(unsigned int capacity) {
     m_container = new List<Item>(capacity);
} 
 
template <class Item>
Stack1<Item> :: ~Stack1( ){
     delete m_container;
}

template <class Item>
bool Stack1<Item> :: isEmpty() const {
    return m_container->isEmpty();
}

template <class Item>
bool Stack1<Item> :: isFull( ) const {
    return false;
}
 
template <class Item>
void Stack1<Item> :: push(Item k) {
    
     m_container->append( k );
}
 
template <class Item>
Item Stack1<Item> :: pop( ) {
     if (isEmpty( )) return NULL;
    
     Item s = m_container->removeLast();
    
     return s;
}

template <class Item>
Item Stack1<Item> :: peek( ) const{
      if (isEmpty( )) return NULL;
      return m_container->retrieve(m_container->getLength());
}

template <class Item>
unsigned int Stack1<Item> :: getSize() {return m_container->getLength();}